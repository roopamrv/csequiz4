
Name:
Last 4 digits ID: 7590

CSE 6332, Cloud Computing					


Quiz Q4, Summer 2023   (c) DL, UTA, 2023


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     ________RV_________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4. Using the cloud services provider, all functionality possible should be implemented on that provider.
    (Of course, displaying web pages through a browser and the user interface is "local")
    The cloud provider is any public cloud service provider.

 5. Upload all data files (*jpg and *csv, not this quiz) to the cloud service.
  
 6. Please put your name and ID on each page you show for this quiz.

Show and submit code, when each part is complete, raise your hand and then show us:

For each of the following you will need to create a table (of any format you wish) and allow a user to enter the following tuples:
{name, 2-letter abbreviation, year, cost} for example: {allen, al, 1998, 40}, {betty, bt, 2010, 20}, {cat, ct, 2012, 10}, 
where the name will be up to 6 letters, the 2-letter abbreviation is exactly two letters, the year ranges from 1970 to 2020, 
and the cost is an integer ranging from 0 to 80. There will be at most 10 entries (tuples) in that table. 
You may choose any method you wish (on a web form) to enter the data. 

 10. Please show a vertical bar chart that occupies at least 85 percent of the screen area, where the bars are colored blue, 
     the bars are sorted such that the smallest is on the left, labels for each bar are described following.
     Each bar represents a name and cost, the name appears under each bar, and the cost (and proportional length) appears on top
     of each bar. 
@app.route('/generate_chart', methods=['POST'])
def generate_chart():
    # Get the user-selected interval or attributes from the form

    selected_attributes = request.form.getlist('attributes')
    selected_plot = request.form.getlist('chart')

    print("Selected plot: ", selected_plot)
    # Connect to the database

    # Execute the SQL query
    query = "SELECT name, cost FROM datas;"
    print(query)
    cur.execute(query)

    # Fetch all rows
    rows = cur.fetchall()

    # Close the cursor and the connection

    # Prepare data for the selected attributes
    chart_data = []
    for row in rows:
        data_point = {}
        data_point['name'] = row[0]
        # data_point['cost'] = row[1]
        for i, attribute in enumerate(['cost']):
            if attribute in selected_attributes:
                data_point[attribute] = str(row[i+1])
        print("DATA: ",data_point)
        chart_data.append(data_point)
    chart_data = sorted(chart_data, key=lambda x: int(x['cost']))
    print("CHART DATA",chart_data)
    # Render the template with the chart data and selected attributes
    if (selected_plot[0] == 'ScatterPlot'):
        return render_template('chart.html', chart_data=json.dumps(chart_data), selected_attributes=selected_attributes)
    if (selected_plot[0] == 'BarChart'):
        return render_template('histplot.html', chart_data=json.dumps(chart_data), selected_attributes=selected_attributes)
    if (selected_plot[0] == 'PieChart'):
        return render_template('piechart.html', chart_data=json.dumps(chart_data), selected_attributes=selected_attributes)
    return render_template('retry.html')


 11. Please show us a pie chart where we will choose N of the largest cost of those tuples entered, (for example for N=2,
     you choose allen and betty) Then you will show us a pie chart that fills 70 to 90% of the window on the screen (may be resized),          with each slice representing the the cost relative to each tuple (for that example, allen's slice is 2/3 of the pie, 
     betty is 1/3), please show the 2-letter abbreviation (in this case "al" and "bt") on the outside of each slice, and 
     the cost on the inside of each slice.

@app.route('/largest', methods=['POST'])
def largest():
    largest = request.form.get('largest')
    selected_attributes = request.form.getlist('attributes')
    selected_plot = request.form.getlist('chart')

    print(largest)
    query = "select top " + largest +"cost from datas;"

    print(query)
    cur.execute(query)

    # Fetch all rows
    rows = cur.fetchall()

    chart_data = []
    for row in rows:
        data_point = {}
        data_point['name'] = row[0]
        # data_point['cost'] = row[1]
        for i, attribute in enumerate(['cost']):
            if attribute in selected_attributes:
                data_point[attribute] = str(row[i+1])
        print("DATA: ",data_point)
        chart_data.append(data_point)
    chart_data = sorted(chart_data, key=lambda x: int(x['cost']))
    print("CHART DATA",chart_data)
    # Render the template with the chart data and selected attributes

    return render_template('piechart.html', chart_data=json.dumps(chart_data), selected_attributes=selected_attributes)


 12. Please display a point chart (scatter chart) where a point is at location X, Y where the X axis is the year and the Y axis 
     represents the cost. The color of a point should be Yellow if the cost is an odd value, and Blue if the cost is even.
     Please label the X and Y axis appropriately (tic marks, or similar)

@app.route('/generate_chart', methods=['POST'])
def generate_chart():
    # Get the user-selected interval or attributes from the form

    selected_attributes = request.form.getlist('attributes')
    selected_plot = request.form.getlist('chart')

    print("Selected plot: ", selected_plot)
    # Connect to the database

    # Execute the SQL query
    query = "SELECT name, cost FROM datas;"
    print(query)
    cur.execute(query)

    # Fetch all rows
    rows = cur.fetchall()

    # Close the cursor and the connection

    # Prepare data for the selected attributes
    chart_data = []
    for row in rows:
        data_point = {}
        data_point['name'] = row[0]
        # data_point['cost'] = row[1]
        for i, attribute in enumerate(['cost']):
            if attribute in selected_attributes:
                data_point[attribute] = str(row[i+1])
        print("DATA: ",data_point)
        chart_data.append(data_point)
    chart_data = sorted(chart_data, key=lambda x: int(x['cost']))
    print("CHART DATA",chart_data)
    # Render the template with the chart data and selected attributes
    if (selected_plot[0] == 'ScatterPlot'):
        return render_template('chart.html', chart_data=json.dumps(chart_data), selected_attributes=selected_attributes)
    if (selected_plot[0] == 'BarChart'):
        return render_template('histplot.html', chart_data=json.dumps(chart_data), selected_attributes=selected_attributes)
    if (selected_plot[0] == 'PieChart'):
        return render_template('piechart.html', chart_data=json.dumps(chart_data), selected_attributes=selected_attributes)
    return render_template('retry.html')


 14. In class, on your computer, please show us the application running and we will try it out. Only for parts 10, 11, 12. 


https://cse-quiz4.azurewebsites.net/


 15. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

